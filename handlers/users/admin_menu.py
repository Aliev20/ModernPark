# - *- coding: utf- 8 - *-
from aiogram import types
from aiogram.dispatcher import FSMContext

from filters import IsAdmin
from keyboards.default import *
from keyboards.inline import choice_way_input_payment_func
from loader import dp, bot
from utils import get_dates
from utils.db_api.sqlite import *
from states.state_users import *
import json

# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì


def split_messages(get_list, count):
    return [get_list[i: i + count] for i in range(0, len(get_list), count)]


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"
@dp.message_handler(IsAdmin(), text="üîë –ü–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", state="*")
async def payments_systems(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã.", reply_markup=payment_default()
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è üíµ\n"
        "\n"
        "üî∏ <a href='https://vk.cc/bYjKGM'><b>–ü–æ —Ñ–æ—Ä–º–µ</b></a> - <code>–ì–æ—Ç–æ–≤–∞—è —Ñ–æ—Ä–º–∞ –æ–ø–ª–∞—Ç—ã QIWI</code>\n"
        "üî∏ <a href='https://vk.cc/bYjKEy'><b>–ü–æ –Ω–æ–º–µ—Ä—É</b></a> - <code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</code>\n"
        "üî∏ <a href='https://vk.cc/bYjKJk'><b>–ü–æ –Ω–∏–∫–Ω–µ–π–º—É</b></a> - "
        "<code>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏–¥—ë—Ç—Å—è –≤—Ä—É—á–Ω—É—é –≤–≤–æ–¥–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π)</code>",
        reply_markup=choice_way_input_payment_func(),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
@dp.message_handler(IsAdmin(), text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏", state="*")
async def settings_bot(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚öô –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.", reply_markup=get_settings_func())


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
@dp.message_handler(IsAdmin(), text="üîÜ –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "üîÜ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é.",
        reply_markup=get_functions_func(message.from_user.id),
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
@dp.message_handler(IsAdmin(), text="üì∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    about_bot = get_about_bot()
    await message.answer(about_bot)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"
@dp.message_handler(IsAdmin(), text="üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ üñç", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer(
        "üéÅ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤, —Ä–∞–∑–¥–µ–ª–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π üìú", reply_markup=items_default
    )


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–î
@dp.message_handler(IsAdmin(), text="/getbd", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    for admin in admins:
        with open("data/botBD.sqlite", "rb") as doc:
            await bot.send_document(
                admin, doc, caption=f"<b>üì¶ BACKUP</b>\n" f"<code>üïú {get_dates()}</code>"
            )


def get_about_bot():
    (
        show_profit_all,
        show_profit_day,
        show_refill,
        show_buy_day,
        show_money_in_bot,
        show,
    ) = (0, 0, 0, 0, 0, 0)
    get_settings = get_settingsx()
    all_purchases = get_all_purchasesx()
    all_users = get_all_usersx()
    all_refill = get_all_refillx()
    show_users = get_all_usersx()
    show_categories = get_all_categoriesx()
    show_positions = get_all_positionsx()
    show_items = get_all_itemsx()
    for purchase in all_purchases:
        show_profit_all += int(purchase[6])
        if int(get_settings[4]) - int(purchase[14]) < 86400:
            show_profit_day += int(purchase[6])
    for user in all_users:
        show_money_in_bot += int(user[4])
    for refill in all_refill:
        show_refill += int(refill[5])
        if int(get_settings[5]) - int(refill[9]) < 86400:
            show_buy_day += int(refill[5])
    message = (
        "<b>üì∞ –í–°–Ø –ò–ù–§–û–†–ê–ú–¶–ò–Ø –û –ë–û–¢–ï</b>\n"
        f"\n"
        f"<b>üî∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: üî∂</b>\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(show_users)}</code>\n"
        f"\n"
        f"<b>üî∂ –°—Ä–µ–¥—Å—Ç–≤–∞ üî∂</b>\n"
        f"üìó –ü—Ä–æ–¥–∞–∂ –∑–∞ 24 —á–∞—Å–∞ –Ω–∞: <code>{show_profit_day}—Ä—É–±</code>\n"
        f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞: <code>{show_profit_all}—Ä—É–±</code>\n"
        f"üìï –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∑–∞ 24 —á–∞—Å–∞: <code>{show_buy_day}—Ä—É–±</code>\n"
        f"üí≥ –°—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: <code>{show_money_in_bot}—Ä—É–±</code>\n"
        f"üíµ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: <code>{show_refill}—Ä—É–±</code>\n"
        f"\n"
        f"<b>üî∂ –ü—Ä–æ—á–µ–µ üî∂</b>\n"
        f"üéÅ –¢–æ–≤–∞—Ä–æ–≤: <code>{len(show_items)}</code>\n"
        f"üìÅ –ü–æ–∑–∏—Ü–∏–π: <code>{len(show_positions)}</code>\n"
        f"üìú –ö–∞—Ç–µ–≥–æ—Ä–∏–π: <code>{len(show_categories)}</code>\n"
        f"üõí –ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: <code>{len(all_purchases)}</code>\n"
    )
    return message


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="/getitems", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_itemsx()
    len_items = len(get_items)
    if len_items >= 1:
        await message.answer(
            "<b>üéÅ –í—Å–µ —Ç–æ–≤–∞—Ä—ã</b>\n"
            "\n"
            "<code>üìç –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞ - –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞</code>\n"
            "\n"
        )
        for item in get_items:
            save_items.append(f"<code>üìç {item[1]} - {item[2]}</code>")
        if len_items >= 20:
            count_split = round(len_items / 20)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message)
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message)
    else:
        await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(IsAdmin(), text="/getposition", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_positionsx()
    len_items = len(get_items)
    if len_items >= 1:
        await message.answer("<b>üìÅ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n\n")
        for item in get_items:
            print(item)
            save_items.append(f"<code>{item[2]}</code>")
        if len_items >= 35:
            count_split = round(len_items / 35)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message)
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message)
    else:
        await message.answer("<b>üìÅ –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="/getinfoitems", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_itemsx()
    len_items = len(get_items)
    if len_items >= 1:
        await message.answer("<b>üéÅ –í—Å–µ —Ç–æ–≤–∞—Ä—ã –∏ –∏—Ö –ø–æ–∑–∏—Ü–∏–∏</b>\n" "\n")
        for item in get_items:
            get_position = get_positionx("*", position_id=item[3])
            save_items.append(f"<code>{get_position[2]} - {item[2]}</code>")
        if len_items >= 20:
            count_split = round(len_items / 20)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message)
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message)
    else:
        await message.answer("<b>üéÅ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")


@dp.message_handler(IsAdmin(), text="üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞", state="*")
async def get_chat_id31(message: types.Message, state: FSMContext):
    element_salary = []
    with open("salary.json") as f:
        data = json.load(f)

    price_admin = data["admin_cafe"]["salary"]
    price_admin1 = data["admin_cafe"]["sales"]

    price_ferrisWheel = data["ferrisWheel"]["salary"]
    price_ferrisWheel1 = data["ferrisWheel"]["sales"]

    price_laughingRoom = data["laughingRoom"]["salary"]
    price_laughingRoom1 = data["laughingRoom"]["sales"]

    price_carousel = data["carousel"]["salary"]
    price_carousel1 = data["carousel"]["sales"]

    blagotvoritelnost = (
        (price_admin + price_ferrisWheel + price_laughingRoom + price_carousel)
        // 100
        * 5
    )

    salary_sales = f"""
    
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–∞—Ñ–µ
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {price_admin} —Ä—É–±
–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {price_admin1}


–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞ ( –∫–æ–ª–µ—Å–æ –æ–±–æ–∑—Ä–µ–Ω–∏—è )
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {price_ferrisWheel} —Ä—É–±
–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {price_ferrisWheel1}


–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–∞ ( –∫–æ–º–Ω–∞—Ç–∞ —Å–º–µ—Ö–∞ )
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: {price_laughingRoom} —Ä—É–±
–ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {price_laughingRoom1}


–ú–µ—Ö–∞–Ω–∏–∫ –∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω–æ–≤ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 20 000 —Ä—É–±

–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ –ø–∞—Ä–∫–∞: {price_admin + price_ferrisWheel + price_laughingRoom + price_carousel - blagotvoritelnost}
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {price_admin1 + price_ferrisWheel1 + price_laughingRoom1 + price_carousel1}
–°—É–º–º–∞ –∫–æ—Ç–æ—Ä–∞—è —É–π–¥–µ—Ç –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ: {blagotvoritelnost}

"""

    # await message.answer(salary_sales)
    await bot.send_photo(
        message.from_user.id,
        "https://www.gorno-altaisk.info/wp-content/uploads/2020/06/001-nga-206.jpg",
        caption=salary_sales,
    )

    await message.answer(
        """
–û–ø–µ—Ä–∞—Ç–æ—Ä –ø–∞—Ä–∫–∞ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 25 000—Ä


–ö–∞—Å—Å–∏—Ä (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 18 000—Ä

–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 35 000—Ä

–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 20 000—Ä

–§–æ—Ç–æ–≥—Ä–∞—Ñ (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 20 000—Ä

–ê–Ω–∏–º–∞—Ç–æ—Ä (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 20 000—Ä

–ü–æ–≤–∞—Ä (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 30 000—Ä

–û—Ñ–∏—Ü–∏–∞–Ω—Ç (—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü)
–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: 18 000—Ä

    """
    )


@dp.message_handler(IsAdmin(), text="üìó –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", state="*")
async def get_chat_id312(message: types.Message, state: FSMContext):
    await message.answer("‚úç –ù–∞–ø–∏—à–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.")
    await StorageUsers.activity.set()


@dp.message_handler(IsAdmin(), state=StorageUsers.activity)
async def get_chat_id312(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")
    data = [message.text]
    with open("activities.json", "w", encoding="utf-8") as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

    await state.finish()


# üìï –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è


@dp.message_handler(IsAdmin(), text="üìï –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Å–µ—â–µ–Ω–∏—è", state="*")
async def get_chat_id312(message: types.Message, state: FSMContext):
    await message.answer("‚úÖ –ì–æ—Ç–æ–≤–æ")
    data = ["–ü–æ—Å–µ—â–µ–Ω–∏–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"]
    with open("booking_park.json", "w", encoding="utf-8") as file:
        json.dump(data, file, indent=4, ensure_ascii=False)


@dp.message_handler(IsAdmin(), text="‚öô –î–æ–±–∞–≤–∏—Ç—å –∫—É–ø–æ–Ω", state="*")
async def get_chdat_id3212(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω:"
    )
    await StorageUsers.get_count_users_c.set()


@dp.message_handler(IsAdmin(), state=StorageUsers.get_count_users_c)
async def gets_chast_idda312(message: types.Message, state: FSMContext):
    global users_active_kupon
    users_active_kupon = int(message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∫—É–ø–æ–Ω–∞:")
    await StorageUsers.get_price_users_c.set()


@dp.message_handler(IsAdmin(), state=StorageUsers.get_price_users_c)
async def gets_chast_idda312(message: types.Message, state: FSMContext):
    global users_price_kupon
    users_price_kupon = int(message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫—É–ø–æ–Ω–∞:")
    await StorageUsers.get_name_coupons_c.set()


@dp.message_handler(IsAdmin(), state=StorageUsers.get_name_coupons_c)
async def gets_chast_idda312(message: types.Message, state: FSMContext):
    name_coupons = message.text
    data1 = {}
    try:
        with open("coupons.json", encoding="utf-8") as file:
            data1 = json.load(file)
    except:
        pass
    data1[name_coupons] = {
        "count": users_active_kupon,
        "price": users_price_kupon,
        "tg_ids": str(message.from_user.id),
    }

    await state.finish()

    with open("coupons.json", "w") as file:
        json.dump(data1, file, indent=4, ensure_ascii=False)
